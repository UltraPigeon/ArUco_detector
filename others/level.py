from others import classes
import pygame as pg
# import numpy as np
# from PIL import Image
#
# img = Image.open('image/map.jpg')
#
#
# arr = np.asarray(img, dtype='uint8')

level_map = [
    '---------------------------------------------------------------',
    '-      ^                     ^                                -',
    '-                                                             -',
    '-                                            --               -',
    '-      -----   ---------                     --               -',
    '-     >-----   ---------                     --               -',
    '-<     --         ^   --                    >------------------',
    '-      --<            --                     ------------------',
    '-      --             --<                                     -',
    '-                     --                                     >-',
    '-                    >--                                      -',
    '-                     --<                                     -',
    '-      --             --                                      -',
    '-      --     v       --                 v      v             -',
    '-      ----------   ----        -------------------------------',
    '-      ----------   ----        -------------------------------',
    '-                               --                            -',
    '-                               --                            -',
    '-                               --                            -',
    '-      ---          ---                                       -',
    '-      ---          ---                                       -',
    '-      ---          ---                                       -',
    '-                               --                            -',
    '-                               --                            -',
    '-                               ---------------               -',
    '-                                            --               -',
    '-      -----   ---------                     --               -',
    '-     >-----   ---------                     --               -',
    '-<     --         ^   --                    >------------------',
    '-      --<            --                     ------------------',
    '-      --             --<                                     -',
    '-                     --                                     >-',
    '-                    >--                                      -',
    '-                     --<                                     -',
    '-      --             --                                      -',
    '-      --             --                 v      v             -',
    '-      --             --        -------------------------------',
    '-      --     v       --        -------------------------------',
    '-      ----------   ----        -------------------------------',
    '-                               --                            -',
    '-                               --                            -',
    '-                               --                            -',
    '-      ---          ---                                       -',
    '-      ---          ---                                       -',
    '-      ---          ---                                       -',
    '-                               --                            -',
    '-                               --                            -',
    '-                               ---------------               -',
    '-                                            --               -',
    '-      -----   ---------                     --               -',
    '-     >-----   ---------                     --               -',
    '-<     --         ^   --                    >------------------',
    '-      --<            --                     ------------------',
    '-      --             --<                                     -',
    '-      ----------   ----        -------------------------------',
    '-                               --                            -',
    '-                               --                            -',
    '-                               --                            -',
    '-      ---          ---                                       -',
    '-      ---          ---                                       -',
    '-      ---          ---                                       -',
    '-                               --                            -',
    '-                               --                            -',
    '-                               ---------------               -',
    '-                                            --               -',
    '-      -----   ---------                     --               -',
    '-     >-----   ---------                     --               -',
    '-<     --         ^   --                    >------------------',
    '-      --<            --                     ------------------',
    '-      --             --<                                     -',
    '---------------------------------------------------------------']
level_structure = len(level_map)
entities = pg.sprite.Group()
walls = []  # то, во что мы будем врезаться или опираться
aruco_markers = []
x = y = 0  # координаты
marker_id_count = 1
for row in level_map:  # вся строка
    for col in row:  # каждый символ
        if col == '-':
            pf = classes.Wall(x, y)
            entities.add(pf)
            walls.append(pf)
        elif col == '<':
            pf = classes.Left(x, y)
            entities.add(pf)
            aruco_markers.append([pf, marker_id_count])
            marker_id_count += 1
        elif col == 'v':
            pf = classes.Down(x, y)
            entities.add(pf)
            aruco_markers.append([pf, marker_id_count])
            marker_id_count += 1
        elif col == '>':
            pf = classes.Right(x, y)
            entities.add(pf)
            aruco_markers.append([pf, marker_id_count])
            marker_id_count += 1
        elif col == '^':
            pf = classes.Up(x, y)
            entities.add(pf)
            aruco_markers.append([pf, marker_id_count])
            marker_id_count += 1
        x += classes.wall_width  # блоки платформы ставятся на ширине блоков
    y += classes.wall_length  # то же самое и с высотой
    x = 0

